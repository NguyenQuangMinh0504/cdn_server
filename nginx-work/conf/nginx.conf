worker_processes  2;
error_log logs/error.log info;


events {
    worker_connections 1024;
}

http {


    access_log logs/access.log;


    upstream second_cache_layer {
#         server 127.0.0.1:8000;
        server 127.0.0.1:8082;
    }

    upstream backend {
        server 127.0.0.1:8081;
    }



    proxy_cache_path /var/cache/nginx/ssd keys_zone=ssd_cache:10m levels=1:2 inactive=600s max_size=700m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/disk keys_zone=disk_cache:100m levels=1:2 inactive=24h max_size=80G use_temp_path=off;

    server {
        listen 80;

#       location /
        location ~* .(gif|jpg|jpeg|png|htm|html|js|css|ico)$ {
            resolver 8.8.4.4;  # use Google's open DNS server
            proxy_cache ssd_cache;
            proxy_cache_key $host$request_uri;
#             proxy_cache_valid 200 1s;
            proxy_cache_min_uses 3;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;


            set $target '';
            access_by_lua_block {
                local key = ngx.var.http_user_agent
                if not key then
                    ngx.log(ngx.ERR, "no user-agent found")
                    return ngx.exit(400)
                end
                local redis = require "resty.redis"
                local cjson = require "cjson"
                local red = redis:new()
                local host, err = red:connect("127.0.0.1", 6379)
                if not host then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end
                host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
                end

                host = cjson.decode(host)
                if host["origins"][1]["protocol"] ~= ngx.var.scheme then
                    ngx.log(ngx.ERR, "wrong scheme")
                    return ngx.exit(400)
                end

                ngx.var.target = host["origins"][1]["host"]
            }

            proxy_set_header Host $target;
            proxy_pass http://second_cache_layer;
        }

    }

    # The second caching layer
    server {
        listen 8082;

        location ~* .(avi|mpg|mpeg|mp4|mp3|flv)$ {
            resolver 8.8.4.4;  # use Google's open DNS server
            proxy_cache disk_cache;


            set $backend_origin '';

            access_by_lua_block {
                ngx.log(ngx.ERR, host["name"])
                local key = ngx.var.http_user_agent
                if not key then
                    ngx.log(ngx.ERR, "no user-agent found")
                    return ngx.exit(400)
                end
                local redis = require "resty.redis"
                local cjson = require "cjson"
                local red = redis:new()
                local host, err = red:connect("127.0.0.1", 6379)
                if not host then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end
                host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
                end

                host = cjson.decode(host)
                if host["origins"][1]["protocol"] ~= ngx.var.scheme then
                    ngx.log(ngx.ERR, "wrong scheme")
                    return ngx.exit(400)
                end

                ngx.var.backend_origin = host["origins"][1]["address"]
                --ngx.say(ngx.var.target)
                --return ngx.exit(200)



            }
#           return 200 "You have reached Application 2\n";
            proxy_pass http://$backend_origin/$uri;

        }

        location ~* .(gif|jpg|jpeg|png|htm|html|js|css|ico)$ {
            resolver 8.8.4.4;  # use Google's open DNS server
            proxy_cache ssd_cache;
            set $backend_origin '';
            access_by_lua_block {
                local key = ngx.var.http_user_agent
                if not key then
                    ngx.log(ngx.ERR, "no user-agent found")
                    return ngx.exit(400)
                end
                local redis = require "resty.redis"
                local cjson = require "cjson"
                local red = redis:new()
                local host, err = red:connect("127.0.0.1", 6379)
                if not host then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end
                host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
                end

                host = cjson.decode(host)
                if host["origins"][1]["protocol"] ~= ngx.var.scheme then
                    ngx.log(ngx.ERR, "wrong scheme")
                    return ngx.exit(400)
                end

                ngx.var.backend_origin = host["origins"][1]["address"]
                --ngx.say(ngx.var.target)
                --return ngx.exit(200)
            }
#           return 200 "You have reached Application 2\n";
            proxy_pass http://$backend_origin/$uri;
        }


    }


#         # This is the testing server
#
#     server {
#         listen 8081;
#         access_by_lua_block {
#             ngx.say(ngx.var.hostname);
#             ngx.say(ngx.var.host);
#             ngx.say(ngx.var.proxy_host)
#             ngx.say(ngx.var.http_host)
#             ngx.say(ngx.var.proxy_port)
#             ngx.say(ngx.var.protocol);
#             ngx.say(ngx.var.scheme);
#             ngx.say(ngx.var.request_uri);
#             ngx.say("Full request: ", ngx.var.request);
#             ngx.say("Request uri: ", ngx.var.uri);
#             ngx.say("Host target: ", ngx.var.target)
#             ngx.say("Target: ", ngx.var.sent_http_target);
#             return ngx.exit(ngx.HTTP_OK)
#         }
#     }


    include servers/*;
}
